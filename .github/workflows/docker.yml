name: Build, Publish, and Test Release

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: yarax/ducku

jobs:
  # Test the code first with proper unit tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies and run tests
        run: |
          uv sync
          uv run pytest -s

  # Build and publish Python package to PyPI
  publish-pypi:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install UV and build tools
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv tool install build
          uv tool install twine

      - name: Build package
        run: |
          chmod +x ./scripts/build.sh
          ./scripts/build.sh

      - name: Publish to PyPI (on tags)
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv tool run twine upload dist/*

  # Build and publish Docker image
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Test the published Docker image
  test-published-image:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Wait for image to be available
        run: sleep 30

      - name: Test published Docker image with sample project
        run: |
          # Create a test project
          mkdir -p /tmp/test-project
          cd /tmp/test-project
          
          echo "# Test Project" > README.md
          echo "This project uses port 8080" >> README.md
          echo "See ./docs/guide.md for more info" >> README.md
          echo "Configuration file: ./config/app.yaml" >> README.md
          
          mkdir -p docs config
          echo "# User Guide" > docs/guide.md
          echo "API endpoint: /api/v1" >> docs/guide.md
          
          echo "server:" > config/app.yaml
          echo "  port: 8080" >> config/app.yaml
          echo "  host: localhost" >> config/app.yaml
          
          # Test ducku on this project
          echo "Testing ducku on sample project..."
          docker run --rm \
            -v /tmp/test-project:/workspace \
            -e PROJECT_PATH=/workspace \
            yarax/ducku:latest

      - name: Test published Docker image with current repository
        run: |
          # Clone the repository to test on actual project
          git clone https://github.com/${{ github.repository }}.git /tmp/repo-test
          cd /tmp/repo-test
          
          echo "Testing ducku on actual repository..."
          docker run --rm \
            -v /tmp/repo-test:/workspace \
            -e PROJECT_PATH=/workspace \
            yarax/ducku:latest

  # Optional: Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      security-events: write
      actions: read
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
